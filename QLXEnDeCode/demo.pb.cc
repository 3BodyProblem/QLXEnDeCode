// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MyUnitTest {

namespace {

const ::google::protobuf::Descriptor* DemoMarketStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoMarketStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoStatic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoStatic_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoSnap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoSnap_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoSnap_InnerBuySell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoSnap_InnerBuySell_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoTrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoVirtualPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoVirtualPrice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_demo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_demo_2eproto() {
  protobuf_AddDesc_demo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "demo.proto");
  GOOGLE_CHECK(file != NULL);
  DemoMarketStatus_descriptor_ = file->message_type(0);
  static const int DemoMarketStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoMarketStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoMarketStatus, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoMarketStatus, time_),
  };
  DemoMarketStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DemoMarketStatus_descriptor_,
      DemoMarketStatus::default_instance_,
      DemoMarketStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(DemoMarketStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoMarketStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoMarketStatus, _is_default_instance_));
  DemoStatic_descriptor_ = file->message_type(1);
  static const int DemoStatic_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoStatic, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoStatic, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoStatic, name_),
  };
  DemoStatic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DemoStatic_descriptor_,
      DemoStatic::default_instance_,
      DemoStatic_offsets_,
      -1,
      -1,
      -1,
      sizeof(DemoStatic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoStatic, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoStatic, _is_default_instance_));
  DemoSnap_descriptor_ = file->message_type(2);
  static const int DemoSnap_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, voip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, sell_),
  };
  DemoSnap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DemoSnap_descriptor_,
      DemoSnap::default_instance_,
      DemoSnap_offsets_,
      -1,
      -1,
      -1,
      sizeof(DemoSnap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap, _is_default_instance_));
  DemoSnap_InnerBuySell_descriptor_ = DemoSnap_descriptor_->nested_type(0);
  static const int DemoSnap_InnerBuySell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap_InnerBuySell, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap_InnerBuySell, volume_),
  };
  DemoSnap_InnerBuySell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DemoSnap_InnerBuySell_descriptor_,
      DemoSnap_InnerBuySell::default_instance_,
      DemoSnap_InnerBuySell_offsets_,
      -1,
      -1,
      -1,
      sizeof(DemoSnap_InnerBuySell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap_InnerBuySell, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoSnap_InnerBuySell, _is_default_instance_));
  DemoTrade_descriptor_ = file->message_type(3);
  static const int DemoTrade_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTrade, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTrade, tradeno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTrade, tradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTrade, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTrade, volume_),
  };
  DemoTrade_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DemoTrade_descriptor_,
      DemoTrade::default_instance_,
      DemoTrade_offsets_,
      -1,
      -1,
      -1,
      sizeof(DemoTrade),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTrade, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTrade, _is_default_instance_));
  DemoIndex_descriptor_ = file->message_type(4);
  static const int DemoIndex_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, volume_),
  };
  DemoIndex_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DemoIndex_descriptor_,
      DemoIndex::default_instance_,
      DemoIndex_offsets_,
      -1,
      -1,
      -1,
      sizeof(DemoIndex),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoIndex, _is_default_instance_));
  DemoVirtualPrice_descriptor_ = file->message_type(5);
  static const int DemoVirtualPrice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoVirtualPrice, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoVirtualPrice, virtualprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoVirtualPrice, virtualvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoVirtualPrice, buyvirtualvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoVirtualPrice, sellvirtualvol_),
  };
  DemoVirtualPrice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DemoVirtualPrice_descriptor_,
      DemoVirtualPrice::default_instance_,
      DemoVirtualPrice_offsets_,
      -1,
      -1,
      -1,
      sizeof(DemoVirtualPrice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoVirtualPrice, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoVirtualPrice, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_demo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DemoMarketStatus_descriptor_, &DemoMarketStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DemoStatic_descriptor_, &DemoStatic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DemoSnap_descriptor_, &DemoSnap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DemoSnap_InnerBuySell_descriptor_, &DemoSnap_InnerBuySell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DemoTrade_descriptor_, &DemoTrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DemoIndex_descriptor_, &DemoIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DemoVirtualPrice_descriptor_, &DemoVirtualPrice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_demo_2eproto() {
  delete DemoMarketStatus::default_instance_;
  delete DemoMarketStatus_reflection_;
  delete DemoStatic::default_instance_;
  delete DemoStatic_reflection_;
  delete DemoSnap::default_instance_;
  delete DemoSnap_reflection_;
  delete DemoSnap_InnerBuySell::default_instance_;
  delete DemoSnap_InnerBuySell_reflection_;
  delete DemoTrade::default_instance_;
  delete DemoTrade_reflection_;
  delete DemoIndex::default_instance_;
  delete DemoIndex_reflection_;
  delete DemoVirtualPrice::default_instance_;
  delete DemoVirtualPrice_reflection_;
}

void protobuf_AddDesc_demo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_demo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndemo.proto\022\nMyUnitTest\">\n\020DemoMarketSt"
    "atus\022\016\n\006Status\030\001 \001(\r\022\014\n\004Date\030\002 \001(\r\022\014\n\004Ti"
    "me\030\003 \001(\r\"6\n\nDemoStatic\022\014\n\004Code\030\001 \001(\t\022\014\n\004"
    "Type\030\002 \001(\r\022\014\n\004Name\030\003 \001(\t\"\254\002\n\010DemoSnap\022\014\n"
    "\004Code\030\001 \001(\t\022\013\n\003Now\030\002 \001(\r\022\014\n\004High\030\003 \001(\021\022\013"
    "\n\003Low\030\004 \001(\021\022\014\n\004Open\030\005 \001(\021\022\r\n\005Close\030\006 \001(\021"
    "\022\014\n\004Voip\030\007 \001(\021\022\016\n\006Amount\030\010 \001(\001\022\016\n\006Volume"
    "\030\t \001(\004\022\017\n\007Records\030\n \001(\r\022.\n\003Buy\030\013 \003(\0132!.M"
    "yUnitTest.DemoSnap.InnerBuySell\022/\n\004Sell\030"
    "\014 \003(\0132!.MyUnitTest.DemoSnap.InnerBuySell"
    "\032-\n\014InnerBuySell\022\r\n\005Price\030\001 \001(\021\022\016\n\006Volum"
    "e\030\002 \001(\004\"\\\n\tDemoTrade\022\014\n\004Code\030\001 \001(\t\022\017\n\007Tr"
    "adeNo\030\002 \001(\r\022\021\n\tTradeTime\030\003 \001(\r\022\r\n\005Price\030"
    "\004 \001(\r\022\016\n\006Volume\030\005 \001(\001\"o\n\tDemoIndex\022\014\n\004Co"
    "de\030\001 \001(\t\022\013\n\003Low\030\002 \001(\r\022\014\n\004Open\030\003 \001(\021\022\014\n\004H"
    "igh\030\004 \001(\021\022\013\n\003Now\030\005 \001(\021\022\016\n\006Amount\030\006 \001(\001\022\016"
    "\n\006Volume\030\007 \001(\001\"|\n\020DemoVirtualPrice\022\014\n\004Co"
    "de\030\001 \001(\t\022\024\n\014VirtualPrice\030\002 \001(\r\022\025\n\rVirtua"
    "lVolume\030\003 \001(\001\022\025\n\rBuyVirtualVol\030\004 \001(\001\022\026\n\016"
    "SellVirtualVol\030\005 \001(\001b\006proto3", 788);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "demo.proto", &protobuf_RegisterTypes);
  DemoMarketStatus::default_instance_ = new DemoMarketStatus();
  DemoStatic::default_instance_ = new DemoStatic();
  DemoSnap::default_instance_ = new DemoSnap();
  DemoSnap_InnerBuySell::default_instance_ = new DemoSnap_InnerBuySell();
  DemoTrade::default_instance_ = new DemoTrade();
  DemoIndex::default_instance_ = new DemoIndex();
  DemoVirtualPrice::default_instance_ = new DemoVirtualPrice();
  DemoMarketStatus::default_instance_->InitAsDefaultInstance();
  DemoStatic::default_instance_->InitAsDefaultInstance();
  DemoSnap::default_instance_->InitAsDefaultInstance();
  DemoSnap_InnerBuySell::default_instance_->InitAsDefaultInstance();
  DemoTrade::default_instance_->InitAsDefaultInstance();
  DemoIndex::default_instance_->InitAsDefaultInstance();
  DemoVirtualPrice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_demo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_demo_2eproto {
  StaticDescriptorInitializer_demo_2eproto() {
    protobuf_AddDesc_demo_2eproto();
  }
} static_descriptor_initializer_demo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemoMarketStatus::kStatusFieldNumber;
const int DemoMarketStatus::kDateFieldNumber;
const int DemoMarketStatus::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemoMarketStatus::DemoMarketStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyUnitTest.DemoMarketStatus)
}

void DemoMarketStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DemoMarketStatus::DemoMarketStatus(const DemoMarketStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyUnitTest.DemoMarketStatus)
}

void DemoMarketStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0u;
  date_ = 0u;
  time_ = 0u;
}

DemoMarketStatus::~DemoMarketStatus() {
  // @@protoc_insertion_point(destructor:MyUnitTest.DemoMarketStatus)
  SharedDtor();
}

void DemoMarketStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemoMarketStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoMarketStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoMarketStatus_descriptor_;
}

const DemoMarketStatus& DemoMarketStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

DemoMarketStatus* DemoMarketStatus::default_instance_ = NULL;

DemoMarketStatus* DemoMarketStatus::New(::google::protobuf::Arena* arena) const {
  DemoMarketStatus* n = new DemoMarketStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DemoMarketStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:MyUnitTest.DemoMarketStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DemoMarketStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DemoMarketStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, time_);

#undef ZR_HELPER_
#undef ZR_

}

bool DemoMarketStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyUnitTest.DemoMarketStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Date;
        break;
      }

      // optional uint32 Date = 2;
      case 2: {
        if (tag == 16) {
         parse_Date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }

      // optional uint32 Time = 3;
      case 3: {
        if (tag == 24) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyUnitTest.DemoMarketStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyUnitTest.DemoMarketStatus)
  return false;
#undef DO_
}

void DemoMarketStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyUnitTest.DemoMarketStatus)
  // optional uint32 Status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 Date = 2;
  if (this->date() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->date(), output);
  }

  // optional uint32 Time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:MyUnitTest.DemoMarketStatus)
}

::google::protobuf::uint8* DemoMarketStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyUnitTest.DemoMarketStatus)
  // optional uint32 Status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 Date = 2;
  if (this->date() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->date(), target);
  }

  // optional uint32 Time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyUnitTest.DemoMarketStatus)
  return target;
}

int DemoMarketStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyUnitTest.DemoMarketStatus)
  int total_size = 0;

  // optional uint32 Status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // optional uint32 Date = 2;
  if (this->date() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->date());
  }

  // optional uint32 Time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoMarketStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyUnitTest.DemoMarketStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DemoMarketStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DemoMarketStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyUnitTest.DemoMarketStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyUnitTest.DemoMarketStatus)
    MergeFrom(*source);
  }
}

void DemoMarketStatus::MergeFrom(const DemoMarketStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyUnitTest.DemoMarketStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.date() != 0) {
    set_date(from.date());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void DemoMarketStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyUnitTest.DemoMarketStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoMarketStatus::CopyFrom(const DemoMarketStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyUnitTest.DemoMarketStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoMarketStatus::IsInitialized() const {

  return true;
}

void DemoMarketStatus::Swap(DemoMarketStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemoMarketStatus::InternalSwap(DemoMarketStatus* other) {
  std::swap(status_, other->status_);
  std::swap(date_, other->date_);
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DemoMarketStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoMarketStatus_descriptor_;
  metadata.reflection = DemoMarketStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DemoMarketStatus

// optional uint32 Status = 1;
void DemoMarketStatus::clear_status() {
  status_ = 0u;
}
 ::google::protobuf::uint32 DemoMarketStatus::status() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoMarketStatus.Status)
  return status_;
}
 void DemoMarketStatus::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoMarketStatus.Status)
}

// optional uint32 Date = 2;
void DemoMarketStatus::clear_date() {
  date_ = 0u;
}
 ::google::protobuf::uint32 DemoMarketStatus::date() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoMarketStatus.Date)
  return date_;
}
 void DemoMarketStatus::set_date(::google::protobuf::uint32 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoMarketStatus.Date)
}

// optional uint32 Time = 3;
void DemoMarketStatus::clear_time() {
  time_ = 0u;
}
 ::google::protobuf::uint32 DemoMarketStatus::time() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoMarketStatus.Time)
  return time_;
}
 void DemoMarketStatus::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoMarketStatus.Time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemoStatic::kCodeFieldNumber;
const int DemoStatic::kTypeFieldNumber;
const int DemoStatic::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemoStatic::DemoStatic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyUnitTest.DemoStatic)
}

void DemoStatic::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DemoStatic::DemoStatic(const DemoStatic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyUnitTest.DemoStatic)
}

void DemoStatic::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DemoStatic::~DemoStatic() {
  // @@protoc_insertion_point(destructor:MyUnitTest.DemoStatic)
  SharedDtor();
}

void DemoStatic::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DemoStatic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoStatic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoStatic_descriptor_;
}

const DemoStatic& DemoStatic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

DemoStatic* DemoStatic::default_instance_ = NULL;

DemoStatic* DemoStatic::New(::google::protobuf::Arena* arena) const {
  DemoStatic* n = new DemoStatic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DemoStatic::Clear() {
// @@protoc_insertion_point(message_clear_start:MyUnitTest.DemoStatic)
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DemoStatic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyUnitTest.DemoStatic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MyUnitTest.DemoStatic.Code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional uint32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // optional string Name = 3;
      case 3: {
        if (tag == 26) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MyUnitTest.DemoStatic.Name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyUnitTest.DemoStatic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyUnitTest.DemoStatic)
  return false;
#undef DO_
}

void DemoStatic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyUnitTest.DemoStatic)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoStatic.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional uint32 Type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoStatic.Name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:MyUnitTest.DemoStatic)
}

::google::protobuf::uint8* DemoStatic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyUnitTest.DemoStatic)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoStatic.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional uint32 Type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoStatic.Name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyUnitTest.DemoStatic)
  return target;
}

int DemoStatic::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyUnitTest.DemoStatic)
  int total_size = 0;

  // optional string Code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // optional uint32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional string Name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoStatic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyUnitTest.DemoStatic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DemoStatic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DemoStatic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyUnitTest.DemoStatic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyUnitTest.DemoStatic)
    MergeFrom(*source);
  }
}

void DemoStatic::MergeFrom(const DemoStatic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyUnitTest.DemoStatic)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DemoStatic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyUnitTest.DemoStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoStatic::CopyFrom(const DemoStatic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyUnitTest.DemoStatic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoStatic::IsInitialized() const {

  return true;
}

void DemoStatic::Swap(DemoStatic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemoStatic::InternalSwap(DemoStatic* other) {
  code_.Swap(&other->code_);
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DemoStatic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoStatic_descriptor_;
  metadata.reflection = DemoStatic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DemoStatic

// optional string Code = 1;
void DemoStatic::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DemoStatic::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoStatic.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoStatic::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoStatic.Code)
}
 void DemoStatic::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoStatic.Code)
}
 void DemoStatic::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoStatic.Code)
}
 ::std::string* DemoStatic::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoStatic.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DemoStatic::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoStatic.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoStatic::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoStatic.Code)
}

// optional uint32 Type = 2;
void DemoStatic::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 DemoStatic::type() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoStatic.Type)
  return type_;
}
 void DemoStatic::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoStatic.Type)
}

// optional string Name = 3;
void DemoStatic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DemoStatic::name() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoStatic.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoStatic::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoStatic.Name)
}
 void DemoStatic::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoStatic.Name)
}
 void DemoStatic::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoStatic.Name)
}
 ::std::string* DemoStatic::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoStatic.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DemoStatic::release_name() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoStatic.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoStatic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoStatic.Name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemoSnap_InnerBuySell::kPriceFieldNumber;
const int DemoSnap_InnerBuySell::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemoSnap_InnerBuySell::DemoSnap_InnerBuySell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyUnitTest.DemoSnap.InnerBuySell)
}

void DemoSnap_InnerBuySell::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DemoSnap_InnerBuySell::DemoSnap_InnerBuySell(const DemoSnap_InnerBuySell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyUnitTest.DemoSnap.InnerBuySell)
}

void DemoSnap_InnerBuySell::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  price_ = 0;
  volume_ = GOOGLE_ULONGLONG(0);
}

DemoSnap_InnerBuySell::~DemoSnap_InnerBuySell() {
  // @@protoc_insertion_point(destructor:MyUnitTest.DemoSnap.InnerBuySell)
  SharedDtor();
}

void DemoSnap_InnerBuySell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemoSnap_InnerBuySell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoSnap_InnerBuySell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoSnap_InnerBuySell_descriptor_;
}

const DemoSnap_InnerBuySell& DemoSnap_InnerBuySell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

DemoSnap_InnerBuySell* DemoSnap_InnerBuySell::default_instance_ = NULL;

DemoSnap_InnerBuySell* DemoSnap_InnerBuySell::New(::google::protobuf::Arena* arena) const {
  DemoSnap_InnerBuySell* n = new DemoSnap_InnerBuySell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DemoSnap_InnerBuySell::Clear() {
// @@protoc_insertion_point(message_clear_start:MyUnitTest.DemoSnap.InnerBuySell)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DemoSnap_InnerBuySell, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DemoSnap_InnerBuySell*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(volume_, price_);

#undef ZR_HELPER_
#undef ZR_

}

bool DemoSnap_InnerBuySell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyUnitTest.DemoSnap.InnerBuySell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 Price = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Volume;
        break;
      }

      // optional uint64 Volume = 2;
      case 2: {
        if (tag == 16) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyUnitTest.DemoSnap.InnerBuySell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyUnitTest.DemoSnap.InnerBuySell)
  return false;
#undef DO_
}

void DemoSnap_InnerBuySell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyUnitTest.DemoSnap.InnerBuySell)
  // optional sint32 Price = 1;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->price(), output);
  }

  // optional uint64 Volume = 2;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->volume(), output);
  }

  // @@protoc_insertion_point(serialize_end:MyUnitTest.DemoSnap.InnerBuySell)
}

::google::protobuf::uint8* DemoSnap_InnerBuySell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyUnitTest.DemoSnap.InnerBuySell)
  // optional sint32 Price = 1;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->price(), target);
  }

  // optional uint64 Volume = 2;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->volume(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyUnitTest.DemoSnap.InnerBuySell)
  return target;
}

int DemoSnap_InnerBuySell::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyUnitTest.DemoSnap.InnerBuySell)
  int total_size = 0;

  // optional sint32 Price = 1;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->price());
  }

  // optional uint64 Volume = 2;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoSnap_InnerBuySell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyUnitTest.DemoSnap.InnerBuySell)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DemoSnap_InnerBuySell* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DemoSnap_InnerBuySell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyUnitTest.DemoSnap.InnerBuySell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyUnitTest.DemoSnap.InnerBuySell)
    MergeFrom(*source);
  }
}

void DemoSnap_InnerBuySell::MergeFrom(const DemoSnap_InnerBuySell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyUnitTest.DemoSnap.InnerBuySell)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
}

void DemoSnap_InnerBuySell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyUnitTest.DemoSnap.InnerBuySell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoSnap_InnerBuySell::CopyFrom(const DemoSnap_InnerBuySell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyUnitTest.DemoSnap.InnerBuySell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoSnap_InnerBuySell::IsInitialized() const {

  return true;
}

void DemoSnap_InnerBuySell::Swap(DemoSnap_InnerBuySell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemoSnap_InnerBuySell::InternalSwap(DemoSnap_InnerBuySell* other) {
  std::swap(price_, other->price_);
  std::swap(volume_, other->volume_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DemoSnap_InnerBuySell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoSnap_InnerBuySell_descriptor_;
  metadata.reflection = DemoSnap_InnerBuySell_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemoSnap::kCodeFieldNumber;
const int DemoSnap::kNowFieldNumber;
const int DemoSnap::kHighFieldNumber;
const int DemoSnap::kLowFieldNumber;
const int DemoSnap::kOpenFieldNumber;
const int DemoSnap::kCloseFieldNumber;
const int DemoSnap::kVoipFieldNumber;
const int DemoSnap::kAmountFieldNumber;
const int DemoSnap::kVolumeFieldNumber;
const int DemoSnap::kRecordsFieldNumber;
const int DemoSnap::kBuyFieldNumber;
const int DemoSnap::kSellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemoSnap::DemoSnap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyUnitTest.DemoSnap)
}

void DemoSnap::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DemoSnap::DemoSnap(const DemoSnap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyUnitTest.DemoSnap)
}

void DemoSnap::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  now_ = 0u;
  high_ = 0;
  low_ = 0;
  open_ = 0;
  close_ = 0;
  voip_ = 0;
  amount_ = 0;
  volume_ = GOOGLE_ULONGLONG(0);
  records_ = 0u;
}

DemoSnap::~DemoSnap() {
  // @@protoc_insertion_point(destructor:MyUnitTest.DemoSnap)
  SharedDtor();
}

void DemoSnap::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DemoSnap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoSnap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoSnap_descriptor_;
}

const DemoSnap& DemoSnap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

DemoSnap* DemoSnap::default_instance_ = NULL;

DemoSnap* DemoSnap::New(::google::protobuf::Arena* arena) const {
  DemoSnap* n = new DemoSnap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DemoSnap::Clear() {
// @@protoc_insertion_point(message_clear_start:MyUnitTest.DemoSnap)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DemoSnap, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DemoSnap*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(now_, amount_);
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_ = GOOGLE_ULONGLONG(0);
  records_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  buy_.Clear();
  sell_.Clear();
}

bool DemoSnap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyUnitTest.DemoSnap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MyUnitTest.DemoSnap.Code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Now;
        break;
      }

      // optional uint32 Now = 2;
      case 2: {
        if (tag == 16) {
         parse_Now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &now_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_High;
        break;
      }

      // optional sint32 High = 3;
      case 3: {
        if (tag == 24) {
         parse_High:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &high_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Low;
        break;
      }

      // optional sint32 Low = 4;
      case 4: {
        if (tag == 32) {
         parse_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &low_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Open;
        break;
      }

      // optional sint32 Open = 5;
      case 5: {
        if (tag == 40) {
         parse_Open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Close;
        break;
      }

      // optional sint32 Close = 6;
      case 6: {
        if (tag == 48) {
         parse_Close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &close_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Voip;
        break;
      }

      // optional sint32 Voip = 7;
      case 7: {
        if (tag == 56) {
         parse_Voip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &voip_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_Amount;
        break;
      }

      // optional double Amount = 8;
      case 8: {
        if (tag == 65) {
         parse_Amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Volume;
        break;
      }

      // optional uint64 Volume = 9;
      case 9: {
        if (tag == 72) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Records;
        break;
      }

      // optional uint32 Records = 10;
      case 10: {
        if (tag == 80) {
         parse_Records:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &records_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Buy;
        break;
      }

      // repeated .MyUnitTest.DemoSnap.InnerBuySell Buy = 11;
      case 11: {
        if (tag == 90) {
         parse_Buy:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_Buy;
        if (input->ExpectTag(98)) goto parse_loop_Sell;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .MyUnitTest.DemoSnap.InnerBuySell Sell = 12;
      case 12: {
        if (tag == 98) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Sell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sell()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_Sell;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyUnitTest.DemoSnap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyUnitTest.DemoSnap)
  return false;
#undef DO_
}

void DemoSnap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyUnitTest.DemoSnap)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoSnap.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional uint32 Now = 2;
  if (this->now() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->now(), output);
  }

  // optional sint32 High = 3;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->high(), output);
  }

  // optional sint32 Low = 4;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->low(), output);
  }

  // optional sint32 Open = 5;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->open(), output);
  }

  // optional sint32 Close = 6;
  if (this->close() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->close(), output);
  }

  // optional sint32 Voip = 7;
  if (this->voip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->voip(), output);
  }

  // optional double Amount = 8;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->amount(), output);
  }

  // optional uint64 Volume = 9;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->volume(), output);
  }

  // optional uint32 Records = 10;
  if (this->records() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->records(), output);
  }

  // repeated .MyUnitTest.DemoSnap.InnerBuySell Buy = 11;
  for (unsigned int i = 0, n = this->buy_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->buy(i), output);
  }

  // repeated .MyUnitTest.DemoSnap.InnerBuySell Sell = 12;
  for (unsigned int i = 0, n = this->sell_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sell(i), output);
  }

  // @@protoc_insertion_point(serialize_end:MyUnitTest.DemoSnap)
}

::google::protobuf::uint8* DemoSnap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyUnitTest.DemoSnap)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoSnap.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional uint32 Now = 2;
  if (this->now() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->now(), target);
  }

  // optional sint32 High = 3;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->high(), target);
  }

  // optional sint32 Low = 4;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->low(), target);
  }

  // optional sint32 Open = 5;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->open(), target);
  }

  // optional sint32 Close = 6;
  if (this->close() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->close(), target);
  }

  // optional sint32 Voip = 7;
  if (this->voip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->voip(), target);
  }

  // optional double Amount = 8;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->amount(), target);
  }

  // optional uint64 Volume = 9;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->volume(), target);
  }

  // optional uint32 Records = 10;
  if (this->records() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->records(), target);
  }

  // repeated .MyUnitTest.DemoSnap.InnerBuySell Buy = 11;
  for (unsigned int i = 0, n = this->buy_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->buy(i), false, target);
  }

  // repeated .MyUnitTest.DemoSnap.InnerBuySell Sell = 12;
  for (unsigned int i = 0, n = this->sell_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->sell(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyUnitTest.DemoSnap)
  return target;
}

int DemoSnap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyUnitTest.DemoSnap)
  int total_size = 0;

  // optional string Code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // optional uint32 Now = 2;
  if (this->now() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->now());
  }

  // optional sint32 High = 3;
  if (this->high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->high());
  }

  // optional sint32 Low = 4;
  if (this->low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->low());
  }

  // optional sint32 Open = 5;
  if (this->open() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->open());
  }

  // optional sint32 Close = 6;
  if (this->close() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->close());
  }

  // optional sint32 Voip = 7;
  if (this->voip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->voip());
  }

  // optional double Amount = 8;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // optional uint64 Volume = 9;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume());
  }

  // optional uint32 Records = 10;
  if (this->records() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->records());
  }

  // repeated .MyUnitTest.DemoSnap.InnerBuySell Buy = 11;
  total_size += 1 * this->buy_size();
  for (int i = 0; i < this->buy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy(i));
  }

  // repeated .MyUnitTest.DemoSnap.InnerBuySell Sell = 12;
  total_size += 1 * this->sell_size();
  for (int i = 0; i < this->sell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sell(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoSnap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyUnitTest.DemoSnap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DemoSnap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DemoSnap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyUnitTest.DemoSnap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyUnitTest.DemoSnap)
    MergeFrom(*source);
  }
}

void DemoSnap::MergeFrom(const DemoSnap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyUnitTest.DemoSnap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  buy_.MergeFrom(from.buy_);
  sell_.MergeFrom(from.sell_);
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.now() != 0) {
    set_now(from.now());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.close() != 0) {
    set_close(from.close());
  }
  if (from.voip() != 0) {
    set_voip(from.voip());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.records() != 0) {
    set_records(from.records());
  }
}

void DemoSnap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyUnitTest.DemoSnap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoSnap::CopyFrom(const DemoSnap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyUnitTest.DemoSnap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoSnap::IsInitialized() const {

  return true;
}

void DemoSnap::Swap(DemoSnap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemoSnap::InternalSwap(DemoSnap* other) {
  code_.Swap(&other->code_);
  std::swap(now_, other->now_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(open_, other->open_);
  std::swap(close_, other->close_);
  std::swap(voip_, other->voip_);
  std::swap(amount_, other->amount_);
  std::swap(volume_, other->volume_);
  std::swap(records_, other->records_);
  buy_.UnsafeArenaSwap(&other->buy_);
  sell_.UnsafeArenaSwap(&other->sell_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DemoSnap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoSnap_descriptor_;
  metadata.reflection = DemoSnap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DemoSnap_InnerBuySell

// optional sint32 Price = 1;
void DemoSnap_InnerBuySell::clear_price() {
  price_ = 0;
}
 ::google::protobuf::int32 DemoSnap_InnerBuySell::price() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.InnerBuySell.Price)
  return price_;
}
 void DemoSnap_InnerBuySell::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.InnerBuySell.Price)
}

// optional uint64 Volume = 2;
void DemoSnap_InnerBuySell::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 DemoSnap_InnerBuySell::volume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.InnerBuySell.Volume)
  return volume_;
}
 void DemoSnap_InnerBuySell::set_volume(::google::protobuf::uint64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.InnerBuySell.Volume)
}

// -------------------------------------------------------------------

// DemoSnap

// optional string Code = 1;
void DemoSnap::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DemoSnap::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoSnap::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Code)
}
 void DemoSnap::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoSnap.Code)
}
 void DemoSnap::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoSnap.Code)
}
 ::std::string* DemoSnap::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoSnap.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DemoSnap::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoSnap.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoSnap::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoSnap.Code)
}

// optional uint32 Now = 2;
void DemoSnap::clear_now() {
  now_ = 0u;
}
 ::google::protobuf::uint32 DemoSnap::now() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Now)
  return now_;
}
 void DemoSnap::set_now(::google::protobuf::uint32 value) {
  
  now_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Now)
}

// optional sint32 High = 3;
void DemoSnap::clear_high() {
  high_ = 0;
}
 ::google::protobuf::int32 DemoSnap::high() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.High)
  return high_;
}
 void DemoSnap::set_high(::google::protobuf::int32 value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.High)
}

// optional sint32 Low = 4;
void DemoSnap::clear_low() {
  low_ = 0;
}
 ::google::protobuf::int32 DemoSnap::low() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Low)
  return low_;
}
 void DemoSnap::set_low(::google::protobuf::int32 value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Low)
}

// optional sint32 Open = 5;
void DemoSnap::clear_open() {
  open_ = 0;
}
 ::google::protobuf::int32 DemoSnap::open() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Open)
  return open_;
}
 void DemoSnap::set_open(::google::protobuf::int32 value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Open)
}

// optional sint32 Close = 6;
void DemoSnap::clear_close() {
  close_ = 0;
}
 ::google::protobuf::int32 DemoSnap::close() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Close)
  return close_;
}
 void DemoSnap::set_close(::google::protobuf::int32 value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Close)
}

// optional sint32 Voip = 7;
void DemoSnap::clear_voip() {
  voip_ = 0;
}
 ::google::protobuf::int32 DemoSnap::voip() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Voip)
  return voip_;
}
 void DemoSnap::set_voip(::google::protobuf::int32 value) {
  
  voip_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Voip)
}

// optional double Amount = 8;
void DemoSnap::clear_amount() {
  amount_ = 0;
}
 double DemoSnap::amount() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Amount)
  return amount_;
}
 void DemoSnap::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Amount)
}

// optional uint64 Volume = 9;
void DemoSnap::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 DemoSnap::volume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Volume)
  return volume_;
}
 void DemoSnap::set_volume(::google::protobuf::uint64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Volume)
}

// optional uint32 Records = 10;
void DemoSnap::clear_records() {
  records_ = 0u;
}
 ::google::protobuf::uint32 DemoSnap::records() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Records)
  return records_;
}
 void DemoSnap::set_records(::google::protobuf::uint32 value) {
  
  records_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Records)
}

// repeated .MyUnitTest.DemoSnap.InnerBuySell Buy = 11;
int DemoSnap::buy_size() const {
  return buy_.size();
}
void DemoSnap::clear_buy() {
  buy_.Clear();
}
const ::MyUnitTest::DemoSnap_InnerBuySell& DemoSnap::buy(int index) const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Buy)
  return buy_.Get(index);
}
::MyUnitTest::DemoSnap_InnerBuySell* DemoSnap::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoSnap.Buy)
  return buy_.Mutable(index);
}
::MyUnitTest::DemoSnap_InnerBuySell* DemoSnap::add_buy() {
  // @@protoc_insertion_point(field_add:MyUnitTest.DemoSnap.Buy)
  return buy_.Add();
}
::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >*
DemoSnap::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:MyUnitTest.DemoSnap.Buy)
  return &buy_;
}
const ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >&
DemoSnap::buy() const {
  // @@protoc_insertion_point(field_list:MyUnitTest.DemoSnap.Buy)
  return buy_;
}

// repeated .MyUnitTest.DemoSnap.InnerBuySell Sell = 12;
int DemoSnap::sell_size() const {
  return sell_.size();
}
void DemoSnap::clear_sell() {
  sell_.Clear();
}
const ::MyUnitTest::DemoSnap_InnerBuySell& DemoSnap::sell(int index) const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Sell)
  return sell_.Get(index);
}
::MyUnitTest::DemoSnap_InnerBuySell* DemoSnap::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoSnap.Sell)
  return sell_.Mutable(index);
}
::MyUnitTest::DemoSnap_InnerBuySell* DemoSnap::add_sell() {
  // @@protoc_insertion_point(field_add:MyUnitTest.DemoSnap.Sell)
  return sell_.Add();
}
::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >*
DemoSnap::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:MyUnitTest.DemoSnap.Sell)
  return &sell_;
}
const ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >&
DemoSnap::sell() const {
  // @@protoc_insertion_point(field_list:MyUnitTest.DemoSnap.Sell)
  return sell_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemoTrade::kCodeFieldNumber;
const int DemoTrade::kTradeNoFieldNumber;
const int DemoTrade::kTradeTimeFieldNumber;
const int DemoTrade::kPriceFieldNumber;
const int DemoTrade::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemoTrade::DemoTrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyUnitTest.DemoTrade)
}

void DemoTrade::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DemoTrade::DemoTrade(const DemoTrade& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyUnitTest.DemoTrade)
}

void DemoTrade::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeno_ = 0u;
  tradetime_ = 0u;
  price_ = 0u;
  volume_ = 0;
}

DemoTrade::~DemoTrade() {
  // @@protoc_insertion_point(destructor:MyUnitTest.DemoTrade)
  SharedDtor();
}

void DemoTrade::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DemoTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoTrade_descriptor_;
}

const DemoTrade& DemoTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

DemoTrade* DemoTrade::default_instance_ = NULL;

DemoTrade* DemoTrade::New(::google::protobuf::Arena* arena) const {
  DemoTrade* n = new DemoTrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DemoTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:MyUnitTest.DemoTrade)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DemoTrade, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DemoTrade*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tradeno_, price_);
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DemoTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyUnitTest.DemoTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MyUnitTest.DemoTrade.Code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TradeNo;
        break;
      }

      // optional uint32 TradeNo = 2;
      case 2: {
        if (tag == 16) {
         parse_TradeNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradeno_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TradeTime;
        break;
      }

      // optional uint32 TradeTime = 3;
      case 3: {
        if (tag == 24) {
         parse_TradeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradetime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Price;
        break;
      }

      // optional uint32 Price = 4;
      case 4: {
        if (tag == 32) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Volume;
        break;
      }

      // optional double Volume = 5;
      case 5: {
        if (tag == 41) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyUnitTest.DemoTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyUnitTest.DemoTrade)
  return false;
#undef DO_
}

void DemoTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyUnitTest.DemoTrade)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoTrade.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional uint32 TradeNo = 2;
  if (this->tradeno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tradeno(), output);
  }

  // optional uint32 TradeTime = 3;
  if (this->tradetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tradetime(), output);
  }

  // optional uint32 Price = 4;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  // optional double Volume = 5;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->volume(), output);
  }

  // @@protoc_insertion_point(serialize_end:MyUnitTest.DemoTrade)
}

::google::protobuf::uint8* DemoTrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyUnitTest.DemoTrade)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoTrade.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional uint32 TradeNo = 2;
  if (this->tradeno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tradeno(), target);
  }

  // optional uint32 TradeTime = 3;
  if (this->tradetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tradetime(), target);
  }

  // optional uint32 Price = 4;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  // optional double Volume = 5;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->volume(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyUnitTest.DemoTrade)
  return target;
}

int DemoTrade::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyUnitTest.DemoTrade)
  int total_size = 0;

  // optional string Code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // optional uint32 TradeNo = 2;
  if (this->tradeno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradeno());
  }

  // optional uint32 TradeTime = 3;
  if (this->tradetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tradetime());
  }

  // optional uint32 Price = 4;
  if (this->price() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->price());
  }

  // optional double Volume = 5;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoTrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyUnitTest.DemoTrade)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DemoTrade* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DemoTrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyUnitTest.DemoTrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyUnitTest.DemoTrade)
    MergeFrom(*source);
  }
}

void DemoTrade::MergeFrom(const DemoTrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyUnitTest.DemoTrade)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.tradeno() != 0) {
    set_tradeno(from.tradeno());
  }
  if (from.tradetime() != 0) {
    set_tradetime(from.tradetime());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
}

void DemoTrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyUnitTest.DemoTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoTrade::CopyFrom(const DemoTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyUnitTest.DemoTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoTrade::IsInitialized() const {

  return true;
}

void DemoTrade::Swap(DemoTrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemoTrade::InternalSwap(DemoTrade* other) {
  code_.Swap(&other->code_);
  std::swap(tradeno_, other->tradeno_);
  std::swap(tradetime_, other->tradetime_);
  std::swap(price_, other->price_);
  std::swap(volume_, other->volume_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DemoTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoTrade_descriptor_;
  metadata.reflection = DemoTrade_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DemoTrade

// optional string Code = 1;
void DemoTrade::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DemoTrade::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoTrade::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.Code)
}
 void DemoTrade::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoTrade.Code)
}
 void DemoTrade::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoTrade.Code)
}
 ::std::string* DemoTrade::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoTrade.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DemoTrade::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoTrade.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoTrade::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoTrade.Code)
}

// optional uint32 TradeNo = 2;
void DemoTrade::clear_tradeno() {
  tradeno_ = 0u;
}
 ::google::protobuf::uint32 DemoTrade::tradeno() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.TradeNo)
  return tradeno_;
}
 void DemoTrade::set_tradeno(::google::protobuf::uint32 value) {
  
  tradeno_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.TradeNo)
}

// optional uint32 TradeTime = 3;
void DemoTrade::clear_tradetime() {
  tradetime_ = 0u;
}
 ::google::protobuf::uint32 DemoTrade::tradetime() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.TradeTime)
  return tradetime_;
}
 void DemoTrade::set_tradetime(::google::protobuf::uint32 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.TradeTime)
}

// optional uint32 Price = 4;
void DemoTrade::clear_price() {
  price_ = 0u;
}
 ::google::protobuf::uint32 DemoTrade::price() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.Price)
  return price_;
}
 void DemoTrade::set_price(::google::protobuf::uint32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.Price)
}

// optional double Volume = 5;
void DemoTrade::clear_volume() {
  volume_ = 0;
}
 double DemoTrade::volume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.Volume)
  return volume_;
}
 void DemoTrade::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.Volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemoIndex::kCodeFieldNumber;
const int DemoIndex::kLowFieldNumber;
const int DemoIndex::kOpenFieldNumber;
const int DemoIndex::kHighFieldNumber;
const int DemoIndex::kNowFieldNumber;
const int DemoIndex::kAmountFieldNumber;
const int DemoIndex::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemoIndex::DemoIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyUnitTest.DemoIndex)
}

void DemoIndex::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DemoIndex::DemoIndex(const DemoIndex& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyUnitTest.DemoIndex)
}

void DemoIndex::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  low_ = 0u;
  open_ = 0;
  high_ = 0;
  now_ = 0;
  amount_ = 0;
  volume_ = 0;
}

DemoIndex::~DemoIndex() {
  // @@protoc_insertion_point(destructor:MyUnitTest.DemoIndex)
  SharedDtor();
}

void DemoIndex::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DemoIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoIndex_descriptor_;
}

const DemoIndex& DemoIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

DemoIndex* DemoIndex::default_instance_ = NULL;

DemoIndex* DemoIndex::New(::google::protobuf::Arena* arena) const {
  DemoIndex* n = new DemoIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DemoIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:MyUnitTest.DemoIndex)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DemoIndex, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DemoIndex*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(low_, volume_);
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DemoIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyUnitTest.DemoIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MyUnitTest.DemoIndex.Code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Low;
        break;
      }

      // optional uint32 Low = 2;
      case 2: {
        if (tag == 16) {
         parse_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Open;
        break;
      }

      // optional sint32 Open = 3;
      case 3: {
        if (tag == 24) {
         parse_Open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &open_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_High;
        break;
      }

      // optional sint32 High = 4;
      case 4: {
        if (tag == 32) {
         parse_High:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &high_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Now;
        break;
      }

      // optional sint32 Now = 5;
      case 5: {
        if (tag == 40) {
         parse_Now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &now_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_Amount;
        break;
      }

      // optional double Amount = 6;
      case 6: {
        if (tag == 49) {
         parse_Amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_Volume;
        break;
      }

      // optional double Volume = 7;
      case 7: {
        if (tag == 57) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyUnitTest.DemoIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyUnitTest.DemoIndex)
  return false;
#undef DO_
}

void DemoIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyUnitTest.DemoIndex)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoIndex.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional uint32 Low = 2;
  if (this->low() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->low(), output);
  }

  // optional sint32 Open = 3;
  if (this->open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->open(), output);
  }

  // optional sint32 High = 4;
  if (this->high() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->high(), output);
  }

  // optional sint32 Now = 5;
  if (this->now() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->now(), output);
  }

  // optional double Amount = 6;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->amount(), output);
  }

  // optional double Volume = 7;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->volume(), output);
  }

  // @@protoc_insertion_point(serialize_end:MyUnitTest.DemoIndex)
}

::google::protobuf::uint8* DemoIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyUnitTest.DemoIndex)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoIndex.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional uint32 Low = 2;
  if (this->low() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->low(), target);
  }

  // optional sint32 Open = 3;
  if (this->open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->open(), target);
  }

  // optional sint32 High = 4;
  if (this->high() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->high(), target);
  }

  // optional sint32 Now = 5;
  if (this->now() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->now(), target);
  }

  // optional double Amount = 6;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->amount(), target);
  }

  // optional double Volume = 7;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->volume(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyUnitTest.DemoIndex)
  return target;
}

int DemoIndex::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyUnitTest.DemoIndex)
  int total_size = 0;

  // optional string Code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // optional uint32 Low = 2;
  if (this->low() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());
  }

  // optional sint32 Open = 3;
  if (this->open() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->open());
  }

  // optional sint32 High = 4;
  if (this->high() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->high());
  }

  // optional sint32 Now = 5;
  if (this->now() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->now());
  }

  // optional double Amount = 6;
  if (this->amount() != 0) {
    total_size += 1 + 8;
  }

  // optional double Volume = 7;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyUnitTest.DemoIndex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DemoIndex* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DemoIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyUnitTest.DemoIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyUnitTest.DemoIndex)
    MergeFrom(*source);
  }
}

void DemoIndex::MergeFrom(const DemoIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyUnitTest.DemoIndex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.low() != 0) {
    set_low(from.low());
  }
  if (from.open() != 0) {
    set_open(from.open());
  }
  if (from.high() != 0) {
    set_high(from.high());
  }
  if (from.now() != 0) {
    set_now(from.now());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
}

void DemoIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyUnitTest.DemoIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoIndex::CopyFrom(const DemoIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyUnitTest.DemoIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoIndex::IsInitialized() const {

  return true;
}

void DemoIndex::Swap(DemoIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemoIndex::InternalSwap(DemoIndex* other) {
  code_.Swap(&other->code_);
  std::swap(low_, other->low_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(now_, other->now_);
  std::swap(amount_, other->amount_);
  std::swap(volume_, other->volume_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DemoIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoIndex_descriptor_;
  metadata.reflection = DemoIndex_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DemoIndex

// optional string Code = 1;
void DemoIndex::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DemoIndex::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoIndex::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Code)
}
 void DemoIndex::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoIndex.Code)
}
 void DemoIndex::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoIndex.Code)
}
 ::std::string* DemoIndex::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoIndex.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DemoIndex::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoIndex.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoIndex::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoIndex.Code)
}

// optional uint32 Low = 2;
void DemoIndex::clear_low() {
  low_ = 0u;
}
 ::google::protobuf::uint32 DemoIndex::low() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Low)
  return low_;
}
 void DemoIndex::set_low(::google::protobuf::uint32 value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Low)
}

// optional sint32 Open = 3;
void DemoIndex::clear_open() {
  open_ = 0;
}
 ::google::protobuf::int32 DemoIndex::open() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Open)
  return open_;
}
 void DemoIndex::set_open(::google::protobuf::int32 value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Open)
}

// optional sint32 High = 4;
void DemoIndex::clear_high() {
  high_ = 0;
}
 ::google::protobuf::int32 DemoIndex::high() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.High)
  return high_;
}
 void DemoIndex::set_high(::google::protobuf::int32 value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.High)
}

// optional sint32 Now = 5;
void DemoIndex::clear_now() {
  now_ = 0;
}
 ::google::protobuf::int32 DemoIndex::now() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Now)
  return now_;
}
 void DemoIndex::set_now(::google::protobuf::int32 value) {
  
  now_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Now)
}

// optional double Amount = 6;
void DemoIndex::clear_amount() {
  amount_ = 0;
}
 double DemoIndex::amount() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Amount)
  return amount_;
}
 void DemoIndex::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Amount)
}

// optional double Volume = 7;
void DemoIndex::clear_volume() {
  volume_ = 0;
}
 double DemoIndex::volume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Volume)
  return volume_;
}
 void DemoIndex::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DemoVirtualPrice::kCodeFieldNumber;
const int DemoVirtualPrice::kVirtualPriceFieldNumber;
const int DemoVirtualPrice::kVirtualVolumeFieldNumber;
const int DemoVirtualPrice::kBuyVirtualVolFieldNumber;
const int DemoVirtualPrice::kSellVirtualVolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DemoVirtualPrice::DemoVirtualPrice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyUnitTest.DemoVirtualPrice)
}

void DemoVirtualPrice::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DemoVirtualPrice::DemoVirtualPrice(const DemoVirtualPrice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyUnitTest.DemoVirtualPrice)
}

void DemoVirtualPrice::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  virtualprice_ = 0u;
  virtualvolume_ = 0;
  buyvirtualvol_ = 0;
  sellvirtualvol_ = 0;
}

DemoVirtualPrice::~DemoVirtualPrice() {
  // @@protoc_insertion_point(destructor:MyUnitTest.DemoVirtualPrice)
  SharedDtor();
}

void DemoVirtualPrice::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DemoVirtualPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoVirtualPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoVirtualPrice_descriptor_;
}

const DemoVirtualPrice& DemoVirtualPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();
  return *default_instance_;
}

DemoVirtualPrice* DemoVirtualPrice::default_instance_ = NULL;

DemoVirtualPrice* DemoVirtualPrice::New(::google::protobuf::Arena* arena) const {
  DemoVirtualPrice* n = new DemoVirtualPrice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DemoVirtualPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:MyUnitTest.DemoVirtualPrice)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DemoVirtualPrice, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DemoVirtualPrice*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(virtualvolume_, virtualprice_);
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DemoVirtualPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyUnitTest.DemoVirtualPrice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MyUnitTest.DemoVirtualPrice.Code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_VirtualPrice;
        break;
      }

      // optional uint32 VirtualPrice = 2;
      case 2: {
        if (tag == 16) {
         parse_VirtualPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtualprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_VirtualVolume;
        break;
      }

      // optional double VirtualVolume = 3;
      case 3: {
        if (tag == 25) {
         parse_VirtualVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &virtualvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_BuyVirtualVol;
        break;
      }

      // optional double BuyVirtualVol = 4;
      case 4: {
        if (tag == 33) {
         parse_BuyVirtualVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvirtualvol_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_SellVirtualVol;
        break;
      }

      // optional double SellVirtualVol = 5;
      case 5: {
        if (tag == 41) {
         parse_SellVirtualVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvirtualvol_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyUnitTest.DemoVirtualPrice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyUnitTest.DemoVirtualPrice)
  return false;
#undef DO_
}

void DemoVirtualPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyUnitTest.DemoVirtualPrice)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoVirtualPrice.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // optional uint32 VirtualPrice = 2;
  if (this->virtualprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->virtualprice(), output);
  }

  // optional double VirtualVolume = 3;
  if (this->virtualvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->virtualvolume(), output);
  }

  // optional double BuyVirtualVol = 4;
  if (this->buyvirtualvol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->buyvirtualvol(), output);
  }

  // optional double SellVirtualVol = 5;
  if (this->sellvirtualvol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sellvirtualvol(), output);
  }

  // @@protoc_insertion_point(serialize_end:MyUnitTest.DemoVirtualPrice)
}

::google::protobuf::uint8* DemoVirtualPrice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyUnitTest.DemoVirtualPrice)
  // optional string Code = 1;
  if (this->code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MyUnitTest.DemoVirtualPrice.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional uint32 VirtualPrice = 2;
  if (this->virtualprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->virtualprice(), target);
  }

  // optional double VirtualVolume = 3;
  if (this->virtualvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->virtualvolume(), target);
  }

  // optional double BuyVirtualVol = 4;
  if (this->buyvirtualvol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->buyvirtualvol(), target);
  }

  // optional double SellVirtualVol = 5;
  if (this->sellvirtualvol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sellvirtualvol(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyUnitTest.DemoVirtualPrice)
  return target;
}

int DemoVirtualPrice::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyUnitTest.DemoVirtualPrice)
  int total_size = 0;

  // optional string Code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  // optional uint32 VirtualPrice = 2;
  if (this->virtualprice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->virtualprice());
  }

  // optional double VirtualVolume = 3;
  if (this->virtualvolume() != 0) {
    total_size += 1 + 8;
  }

  // optional double BuyVirtualVol = 4;
  if (this->buyvirtualvol() != 0) {
    total_size += 1 + 8;
  }

  // optional double SellVirtualVol = 5;
  if (this->sellvirtualvol() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoVirtualPrice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyUnitTest.DemoVirtualPrice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DemoVirtualPrice* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DemoVirtualPrice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyUnitTest.DemoVirtualPrice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyUnitTest.DemoVirtualPrice)
    MergeFrom(*source);
  }
}

void DemoVirtualPrice::MergeFrom(const DemoVirtualPrice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyUnitTest.DemoVirtualPrice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.virtualprice() != 0) {
    set_virtualprice(from.virtualprice());
  }
  if (from.virtualvolume() != 0) {
    set_virtualvolume(from.virtualvolume());
  }
  if (from.buyvirtualvol() != 0) {
    set_buyvirtualvol(from.buyvirtualvol());
  }
  if (from.sellvirtualvol() != 0) {
    set_sellvirtualvol(from.sellvirtualvol());
  }
}

void DemoVirtualPrice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyUnitTest.DemoVirtualPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoVirtualPrice::CopyFrom(const DemoVirtualPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyUnitTest.DemoVirtualPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoVirtualPrice::IsInitialized() const {

  return true;
}

void DemoVirtualPrice::Swap(DemoVirtualPrice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DemoVirtualPrice::InternalSwap(DemoVirtualPrice* other) {
  code_.Swap(&other->code_);
  std::swap(virtualprice_, other->virtualprice_);
  std::swap(virtualvolume_, other->virtualvolume_);
  std::swap(buyvirtualvol_, other->buyvirtualvol_);
  std::swap(sellvirtualvol_, other->sellvirtualvol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DemoVirtualPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoVirtualPrice_descriptor_;
  metadata.reflection = DemoVirtualPrice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DemoVirtualPrice

// optional string Code = 1;
void DemoVirtualPrice::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DemoVirtualPrice::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoVirtualPrice::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.Code)
}
 void DemoVirtualPrice::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoVirtualPrice.Code)
}
 void DemoVirtualPrice::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoVirtualPrice.Code)
}
 ::std::string* DemoVirtualPrice::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoVirtualPrice.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DemoVirtualPrice::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoVirtualPrice.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DemoVirtualPrice::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoVirtualPrice.Code)
}

// optional uint32 VirtualPrice = 2;
void DemoVirtualPrice::clear_virtualprice() {
  virtualprice_ = 0u;
}
 ::google::protobuf::uint32 DemoVirtualPrice::virtualprice() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.VirtualPrice)
  return virtualprice_;
}
 void DemoVirtualPrice::set_virtualprice(::google::protobuf::uint32 value) {
  
  virtualprice_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.VirtualPrice)
}

// optional double VirtualVolume = 3;
void DemoVirtualPrice::clear_virtualvolume() {
  virtualvolume_ = 0;
}
 double DemoVirtualPrice::virtualvolume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.VirtualVolume)
  return virtualvolume_;
}
 void DemoVirtualPrice::set_virtualvolume(double value) {
  
  virtualvolume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.VirtualVolume)
}

// optional double BuyVirtualVol = 4;
void DemoVirtualPrice::clear_buyvirtualvol() {
  buyvirtualvol_ = 0;
}
 double DemoVirtualPrice::buyvirtualvol() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.BuyVirtualVol)
  return buyvirtualvol_;
}
 void DemoVirtualPrice::set_buyvirtualvol(double value) {
  
  buyvirtualvol_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.BuyVirtualVol)
}

// optional double SellVirtualVol = 5;
void DemoVirtualPrice::clear_sellvirtualvol() {
  sellvirtualvol_ = 0;
}
 double DemoVirtualPrice::sellvirtualvol() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.SellVirtualVol)
  return sellvirtualvol_;
}
 void DemoVirtualPrice::set_sellvirtualvol(double value) {
  
  sellvirtualvol_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.SellVirtualVol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace MyUnitTest

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef PROTOBUF_demo_2eproto__INCLUDED
#define PROTOBUF_demo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MyUnitTest {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_demo_2eproto();
void protobuf_AssignDesc_demo_2eproto();
void protobuf_ShutdownFile_demo_2eproto();

class DemoIndex;
class DemoMarketStatus;
class DemoSnap;
class DemoSnap_InnerBuySell;
class DemoStatic;
class DemoTrade;
class DemoVirtualPrice;

// ===================================================================

class DemoMarketStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyUnitTest.DemoMarketStatus) */ {
 public:
  DemoMarketStatus();
  virtual ~DemoMarketStatus();

  DemoMarketStatus(const DemoMarketStatus& from);

  inline DemoMarketStatus& operator=(const DemoMarketStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoMarketStatus& default_instance();

  void Swap(DemoMarketStatus* other);

  // implements Message ----------------------------------------------

  inline DemoMarketStatus* New() const { return New(NULL); }

  DemoMarketStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemoMarketStatus& from);
  void MergeFrom(const DemoMarketStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DemoMarketStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 Date = 2;
  void clear_date();
  static const int kDateFieldNumber = 2;
  ::google::protobuf::uint32 date() const;
  void set_date(::google::protobuf::uint32 value);

  // optional uint32 Time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MyUnitTest.DemoMarketStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 time_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static DemoMarketStatus* default_instance_;
};
// -------------------------------------------------------------------

class DemoStatic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyUnitTest.DemoStatic) */ {
 public:
  DemoStatic();
  virtual ~DemoStatic();

  DemoStatic(const DemoStatic& from);

  inline DemoStatic& operator=(const DemoStatic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoStatic& default_instance();

  void Swap(DemoStatic* other);

  // implements Message ----------------------------------------------

  inline DemoStatic* New() const { return New(NULL); }

  DemoStatic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemoStatic& from);
  void MergeFrom(const DemoStatic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DemoStatic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MyUnitTest.DemoStatic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static DemoStatic* default_instance_;
};
// -------------------------------------------------------------------

class DemoSnap_InnerBuySell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyUnitTest.DemoSnap.InnerBuySell) */ {
 public:
  DemoSnap_InnerBuySell();
  virtual ~DemoSnap_InnerBuySell();

  DemoSnap_InnerBuySell(const DemoSnap_InnerBuySell& from);

  inline DemoSnap_InnerBuySell& operator=(const DemoSnap_InnerBuySell& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoSnap_InnerBuySell& default_instance();

  void Swap(DemoSnap_InnerBuySell* other);

  // implements Message ----------------------------------------------

  inline DemoSnap_InnerBuySell* New() const { return New(NULL); }

  DemoSnap_InnerBuySell* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemoSnap_InnerBuySell& from);
  void MergeFrom(const DemoSnap_InnerBuySell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DemoSnap_InnerBuySell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 Price = 1;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // optional uint64 Volume = 2;
  void clear_volume();
  static const int kVolumeFieldNumber = 2;
  ::google::protobuf::uint64 volume() const;
  void set_volume(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:MyUnitTest.DemoSnap.InnerBuySell)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 volume_;
  ::google::protobuf::int32 price_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static DemoSnap_InnerBuySell* default_instance_;
};
// -------------------------------------------------------------------

class DemoSnap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyUnitTest.DemoSnap) */ {
 public:
  DemoSnap();
  virtual ~DemoSnap();

  DemoSnap(const DemoSnap& from);

  inline DemoSnap& operator=(const DemoSnap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoSnap& default_instance();

  void Swap(DemoSnap* other);

  // implements Message ----------------------------------------------

  inline DemoSnap* New() const { return New(NULL); }

  DemoSnap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemoSnap& from);
  void MergeFrom(const DemoSnap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DemoSnap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DemoSnap_InnerBuySell InnerBuySell;

  // accessors -------------------------------------------------------

  // optional string Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 Now = 2;
  void clear_now();
  static const int kNowFieldNumber = 2;
  ::google::protobuf::uint32 now() const;
  void set_now(::google::protobuf::uint32 value);

  // optional sint32 High = 3;
  void clear_high();
  static const int kHighFieldNumber = 3;
  ::google::protobuf::int32 high() const;
  void set_high(::google::protobuf::int32 value);

  // optional sint32 Low = 4;
  void clear_low();
  static const int kLowFieldNumber = 4;
  ::google::protobuf::int32 low() const;
  void set_low(::google::protobuf::int32 value);

  // optional sint32 Open = 5;
  void clear_open();
  static const int kOpenFieldNumber = 5;
  ::google::protobuf::int32 open() const;
  void set_open(::google::protobuf::int32 value);

  // optional sint32 Close = 6;
  void clear_close();
  static const int kCloseFieldNumber = 6;
  ::google::protobuf::int32 close() const;
  void set_close(::google::protobuf::int32 value);

  // optional sint32 Voip = 7;
  void clear_voip();
  static const int kVoipFieldNumber = 7;
  ::google::protobuf::int32 voip() const;
  void set_voip(::google::protobuf::int32 value);

  // optional double Amount = 8;
  void clear_amount();
  static const int kAmountFieldNumber = 8;
  double amount() const;
  void set_amount(double value);

  // optional uint64 Volume = 9;
  void clear_volume();
  static const int kVolumeFieldNumber = 9;
  ::google::protobuf::uint64 volume() const;
  void set_volume(::google::protobuf::uint64 value);

  // optional uint32 Records = 10;
  void clear_records();
  static const int kRecordsFieldNumber = 10;
  ::google::protobuf::uint32 records() const;
  void set_records(::google::protobuf::uint32 value);

  // repeated .MyUnitTest.DemoSnap.InnerBuySell Buy = 11;
  int buy_size() const;
  void clear_buy();
  static const int kBuyFieldNumber = 11;
  const ::MyUnitTest::DemoSnap_InnerBuySell& buy(int index) const;
  ::MyUnitTest::DemoSnap_InnerBuySell* mutable_buy(int index);
  ::MyUnitTest::DemoSnap_InnerBuySell* add_buy();
  ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >*
      mutable_buy();
  const ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >&
      buy() const;

  // repeated .MyUnitTest.DemoSnap.InnerBuySell Sell = 12;
  int sell_size() const;
  void clear_sell();
  static const int kSellFieldNumber = 12;
  const ::MyUnitTest::DemoSnap_InnerBuySell& sell(int index) const;
  ::MyUnitTest::DemoSnap_InnerBuySell* mutable_sell(int index);
  ::MyUnitTest::DemoSnap_InnerBuySell* add_sell();
  ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >*
      mutable_sell();
  const ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >&
      sell() const;

  // @@protoc_insertion_point(class_scope:MyUnitTest.DemoSnap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 now_;
  ::google::protobuf::int32 high_;
  ::google::protobuf::int32 low_;
  ::google::protobuf::int32 open_;
  ::google::protobuf::int32 close_;
  ::google::protobuf::int32 voip_;
  double amount_;
  ::google::protobuf::uint64 volume_;
  ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell > buy_;
  ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell > sell_;
  ::google::protobuf::uint32 records_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static DemoSnap* default_instance_;
};
// -------------------------------------------------------------------

class DemoTrade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyUnitTest.DemoTrade) */ {
 public:
  DemoTrade();
  virtual ~DemoTrade();

  DemoTrade(const DemoTrade& from);

  inline DemoTrade& operator=(const DemoTrade& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoTrade& default_instance();

  void Swap(DemoTrade* other);

  // implements Message ----------------------------------------------

  inline DemoTrade* New() const { return New(NULL); }

  DemoTrade* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemoTrade& from);
  void MergeFrom(const DemoTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DemoTrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 TradeNo = 2;
  void clear_tradeno();
  static const int kTradeNoFieldNumber = 2;
  ::google::protobuf::uint32 tradeno() const;
  void set_tradeno(::google::protobuf::uint32 value);

  // optional uint32 TradeTime = 3;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 3;
  ::google::protobuf::uint32 tradetime() const;
  void set_tradetime(::google::protobuf::uint32 value);

  // optional uint32 Price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::uint32 price() const;
  void set_price(::google::protobuf::uint32 value);

  // optional double Volume = 5;
  void clear_volume();
  static const int kVolumeFieldNumber = 5;
  double volume() const;
  void set_volume(double value);

  // @@protoc_insertion_point(class_scope:MyUnitTest.DemoTrade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 tradeno_;
  ::google::protobuf::uint32 tradetime_;
  double volume_;
  ::google::protobuf::uint32 price_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static DemoTrade* default_instance_;
};
// -------------------------------------------------------------------

class DemoIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyUnitTest.DemoIndex) */ {
 public:
  DemoIndex();
  virtual ~DemoIndex();

  DemoIndex(const DemoIndex& from);

  inline DemoIndex& operator=(const DemoIndex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoIndex& default_instance();

  void Swap(DemoIndex* other);

  // implements Message ----------------------------------------------

  inline DemoIndex* New() const { return New(NULL); }

  DemoIndex* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemoIndex& from);
  void MergeFrom(const DemoIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DemoIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 Low = 2;
  void clear_low();
  static const int kLowFieldNumber = 2;
  ::google::protobuf::uint32 low() const;
  void set_low(::google::protobuf::uint32 value);

  // optional sint32 Open = 3;
  void clear_open();
  static const int kOpenFieldNumber = 3;
  ::google::protobuf::int32 open() const;
  void set_open(::google::protobuf::int32 value);

  // optional sint32 High = 4;
  void clear_high();
  static const int kHighFieldNumber = 4;
  ::google::protobuf::int32 high() const;
  void set_high(::google::protobuf::int32 value);

  // optional sint32 Now = 5;
  void clear_now();
  static const int kNowFieldNumber = 5;
  ::google::protobuf::int32 now() const;
  void set_now(::google::protobuf::int32 value);

  // optional double Amount = 6;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  double amount() const;
  void set_amount(double value);

  // optional double Volume = 7;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  double volume() const;
  void set_volume(double value);

  // @@protoc_insertion_point(class_scope:MyUnitTest.DemoIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 low_;
  ::google::protobuf::int32 open_;
  ::google::protobuf::int32 high_;
  ::google::protobuf::int32 now_;
  double amount_;
  double volume_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static DemoIndex* default_instance_;
};
// -------------------------------------------------------------------

class DemoVirtualPrice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MyUnitTest.DemoVirtualPrice) */ {
 public:
  DemoVirtualPrice();
  virtual ~DemoVirtualPrice();

  DemoVirtualPrice(const DemoVirtualPrice& from);

  inline DemoVirtualPrice& operator=(const DemoVirtualPrice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DemoVirtualPrice& default_instance();

  void Swap(DemoVirtualPrice* other);

  // implements Message ----------------------------------------------

  inline DemoVirtualPrice* New() const { return New(NULL); }

  DemoVirtualPrice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DemoVirtualPrice& from);
  void MergeFrom(const DemoVirtualPrice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DemoVirtualPrice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // optional uint32 VirtualPrice = 2;
  void clear_virtualprice();
  static const int kVirtualPriceFieldNumber = 2;
  ::google::protobuf::uint32 virtualprice() const;
  void set_virtualprice(::google::protobuf::uint32 value);

  // optional double VirtualVolume = 3;
  void clear_virtualvolume();
  static const int kVirtualVolumeFieldNumber = 3;
  double virtualvolume() const;
  void set_virtualvolume(double value);

  // optional double BuyVirtualVol = 4;
  void clear_buyvirtualvol();
  static const int kBuyVirtualVolFieldNumber = 4;
  double buyvirtualvol() const;
  void set_buyvirtualvol(double value);

  // optional double SellVirtualVol = 5;
  void clear_sellvirtualvol();
  static const int kSellVirtualVolFieldNumber = 5;
  double sellvirtualvol() const;
  void set_sellvirtualvol(double value);

  // @@protoc_insertion_point(class_scope:MyUnitTest.DemoVirtualPrice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  double virtualvolume_;
  double buyvirtualvol_;
  double sellvirtualvol_;
  ::google::protobuf::uint32 virtualprice_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();

  void InitAsDefaultInstance();
  static DemoVirtualPrice* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DemoMarketStatus

// optional uint32 Status = 1;
inline void DemoMarketStatus::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 DemoMarketStatus::status() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoMarketStatus.Status)
  return status_;
}
inline void DemoMarketStatus::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoMarketStatus.Status)
}

// optional uint32 Date = 2;
inline void DemoMarketStatus::clear_date() {
  date_ = 0u;
}
inline ::google::protobuf::uint32 DemoMarketStatus::date() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoMarketStatus.Date)
  return date_;
}
inline void DemoMarketStatus::set_date(::google::protobuf::uint32 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoMarketStatus.Date)
}

// optional uint32 Time = 3;
inline void DemoMarketStatus::clear_time() {
  time_ = 0u;
}
inline ::google::protobuf::uint32 DemoMarketStatus::time() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoMarketStatus.Time)
  return time_;
}
inline void DemoMarketStatus::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoMarketStatus.Time)
}

// -------------------------------------------------------------------

// DemoStatic

// optional string Code = 1;
inline void DemoStatic::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DemoStatic::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoStatic.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoStatic::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoStatic.Code)
}
inline void DemoStatic::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoStatic.Code)
}
inline void DemoStatic::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoStatic.Code)
}
inline ::std::string* DemoStatic::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoStatic.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DemoStatic::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoStatic.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoStatic::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoStatic.Code)
}

// optional uint32 Type = 2;
inline void DemoStatic::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 DemoStatic::type() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoStatic.Type)
  return type_;
}
inline void DemoStatic::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoStatic.Type)
}

// optional string Name = 3;
inline void DemoStatic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DemoStatic::name() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoStatic.Name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoStatic::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoStatic.Name)
}
inline void DemoStatic::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoStatic.Name)
}
inline void DemoStatic::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoStatic.Name)
}
inline ::std::string* DemoStatic::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoStatic.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DemoStatic::release_name() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoStatic.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoStatic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoStatic.Name)
}

// -------------------------------------------------------------------

// DemoSnap_InnerBuySell

// optional sint32 Price = 1;
inline void DemoSnap_InnerBuySell::clear_price() {
  price_ = 0;
}
inline ::google::protobuf::int32 DemoSnap_InnerBuySell::price() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.InnerBuySell.Price)
  return price_;
}
inline void DemoSnap_InnerBuySell::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.InnerBuySell.Price)
}

// optional uint64 Volume = 2;
inline void DemoSnap_InnerBuySell::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DemoSnap_InnerBuySell::volume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.InnerBuySell.Volume)
  return volume_;
}
inline void DemoSnap_InnerBuySell::set_volume(::google::protobuf::uint64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.InnerBuySell.Volume)
}

// -------------------------------------------------------------------

// DemoSnap

// optional string Code = 1;
inline void DemoSnap::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DemoSnap::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoSnap::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Code)
}
inline void DemoSnap::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoSnap.Code)
}
inline void DemoSnap::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoSnap.Code)
}
inline ::std::string* DemoSnap::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoSnap.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DemoSnap::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoSnap.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoSnap::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoSnap.Code)
}

// optional uint32 Now = 2;
inline void DemoSnap::clear_now() {
  now_ = 0u;
}
inline ::google::protobuf::uint32 DemoSnap::now() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Now)
  return now_;
}
inline void DemoSnap::set_now(::google::protobuf::uint32 value) {
  
  now_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Now)
}

// optional sint32 High = 3;
inline void DemoSnap::clear_high() {
  high_ = 0;
}
inline ::google::protobuf::int32 DemoSnap::high() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.High)
  return high_;
}
inline void DemoSnap::set_high(::google::protobuf::int32 value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.High)
}

// optional sint32 Low = 4;
inline void DemoSnap::clear_low() {
  low_ = 0;
}
inline ::google::protobuf::int32 DemoSnap::low() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Low)
  return low_;
}
inline void DemoSnap::set_low(::google::protobuf::int32 value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Low)
}

// optional sint32 Open = 5;
inline void DemoSnap::clear_open() {
  open_ = 0;
}
inline ::google::protobuf::int32 DemoSnap::open() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Open)
  return open_;
}
inline void DemoSnap::set_open(::google::protobuf::int32 value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Open)
}

// optional sint32 Close = 6;
inline void DemoSnap::clear_close() {
  close_ = 0;
}
inline ::google::protobuf::int32 DemoSnap::close() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Close)
  return close_;
}
inline void DemoSnap::set_close(::google::protobuf::int32 value) {
  
  close_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Close)
}

// optional sint32 Voip = 7;
inline void DemoSnap::clear_voip() {
  voip_ = 0;
}
inline ::google::protobuf::int32 DemoSnap::voip() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Voip)
  return voip_;
}
inline void DemoSnap::set_voip(::google::protobuf::int32 value) {
  
  voip_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Voip)
}

// optional double Amount = 8;
inline void DemoSnap::clear_amount() {
  amount_ = 0;
}
inline double DemoSnap::amount() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Amount)
  return amount_;
}
inline void DemoSnap::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Amount)
}

// optional uint64 Volume = 9;
inline void DemoSnap::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DemoSnap::volume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Volume)
  return volume_;
}
inline void DemoSnap::set_volume(::google::protobuf::uint64 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Volume)
}

// optional uint32 Records = 10;
inline void DemoSnap::clear_records() {
  records_ = 0u;
}
inline ::google::protobuf::uint32 DemoSnap::records() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Records)
  return records_;
}
inline void DemoSnap::set_records(::google::protobuf::uint32 value) {
  
  records_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoSnap.Records)
}

// repeated .MyUnitTest.DemoSnap.InnerBuySell Buy = 11;
inline int DemoSnap::buy_size() const {
  return buy_.size();
}
inline void DemoSnap::clear_buy() {
  buy_.Clear();
}
inline const ::MyUnitTest::DemoSnap_InnerBuySell& DemoSnap::buy(int index) const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Buy)
  return buy_.Get(index);
}
inline ::MyUnitTest::DemoSnap_InnerBuySell* DemoSnap::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoSnap.Buy)
  return buy_.Mutable(index);
}
inline ::MyUnitTest::DemoSnap_InnerBuySell* DemoSnap::add_buy() {
  // @@protoc_insertion_point(field_add:MyUnitTest.DemoSnap.Buy)
  return buy_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >*
DemoSnap::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:MyUnitTest.DemoSnap.Buy)
  return &buy_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >&
DemoSnap::buy() const {
  // @@protoc_insertion_point(field_list:MyUnitTest.DemoSnap.Buy)
  return buy_;
}

// repeated .MyUnitTest.DemoSnap.InnerBuySell Sell = 12;
inline int DemoSnap::sell_size() const {
  return sell_.size();
}
inline void DemoSnap::clear_sell() {
  sell_.Clear();
}
inline const ::MyUnitTest::DemoSnap_InnerBuySell& DemoSnap::sell(int index) const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoSnap.Sell)
  return sell_.Get(index);
}
inline ::MyUnitTest::DemoSnap_InnerBuySell* DemoSnap::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoSnap.Sell)
  return sell_.Mutable(index);
}
inline ::MyUnitTest::DemoSnap_InnerBuySell* DemoSnap::add_sell() {
  // @@protoc_insertion_point(field_add:MyUnitTest.DemoSnap.Sell)
  return sell_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >*
DemoSnap::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:MyUnitTest.DemoSnap.Sell)
  return &sell_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MyUnitTest::DemoSnap_InnerBuySell >&
DemoSnap::sell() const {
  // @@protoc_insertion_point(field_list:MyUnitTest.DemoSnap.Sell)
  return sell_;
}

// -------------------------------------------------------------------

// DemoTrade

// optional string Code = 1;
inline void DemoTrade::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DemoTrade::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoTrade::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.Code)
}
inline void DemoTrade::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoTrade.Code)
}
inline void DemoTrade::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoTrade.Code)
}
inline ::std::string* DemoTrade::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoTrade.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DemoTrade::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoTrade.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoTrade::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoTrade.Code)
}

// optional uint32 TradeNo = 2;
inline void DemoTrade::clear_tradeno() {
  tradeno_ = 0u;
}
inline ::google::protobuf::uint32 DemoTrade::tradeno() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.TradeNo)
  return tradeno_;
}
inline void DemoTrade::set_tradeno(::google::protobuf::uint32 value) {
  
  tradeno_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.TradeNo)
}

// optional uint32 TradeTime = 3;
inline void DemoTrade::clear_tradetime() {
  tradetime_ = 0u;
}
inline ::google::protobuf::uint32 DemoTrade::tradetime() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.TradeTime)
  return tradetime_;
}
inline void DemoTrade::set_tradetime(::google::protobuf::uint32 value) {
  
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.TradeTime)
}

// optional uint32 Price = 4;
inline void DemoTrade::clear_price() {
  price_ = 0u;
}
inline ::google::protobuf::uint32 DemoTrade::price() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.Price)
  return price_;
}
inline void DemoTrade::set_price(::google::protobuf::uint32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.Price)
}

// optional double Volume = 5;
inline void DemoTrade::clear_volume() {
  volume_ = 0;
}
inline double DemoTrade::volume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoTrade.Volume)
  return volume_;
}
inline void DemoTrade::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoTrade.Volume)
}

// -------------------------------------------------------------------

// DemoIndex

// optional string Code = 1;
inline void DemoIndex::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DemoIndex::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoIndex::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Code)
}
inline void DemoIndex::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoIndex.Code)
}
inline void DemoIndex::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoIndex.Code)
}
inline ::std::string* DemoIndex::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoIndex.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DemoIndex::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoIndex.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoIndex::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoIndex.Code)
}

// optional uint32 Low = 2;
inline void DemoIndex::clear_low() {
  low_ = 0u;
}
inline ::google::protobuf::uint32 DemoIndex::low() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Low)
  return low_;
}
inline void DemoIndex::set_low(::google::protobuf::uint32 value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Low)
}

// optional sint32 Open = 3;
inline void DemoIndex::clear_open() {
  open_ = 0;
}
inline ::google::protobuf::int32 DemoIndex::open() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Open)
  return open_;
}
inline void DemoIndex::set_open(::google::protobuf::int32 value) {
  
  open_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Open)
}

// optional sint32 High = 4;
inline void DemoIndex::clear_high() {
  high_ = 0;
}
inline ::google::protobuf::int32 DemoIndex::high() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.High)
  return high_;
}
inline void DemoIndex::set_high(::google::protobuf::int32 value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.High)
}

// optional sint32 Now = 5;
inline void DemoIndex::clear_now() {
  now_ = 0;
}
inline ::google::protobuf::int32 DemoIndex::now() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Now)
  return now_;
}
inline void DemoIndex::set_now(::google::protobuf::int32 value) {
  
  now_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Now)
}

// optional double Amount = 6;
inline void DemoIndex::clear_amount() {
  amount_ = 0;
}
inline double DemoIndex::amount() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Amount)
  return amount_;
}
inline void DemoIndex::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Amount)
}

// optional double Volume = 7;
inline void DemoIndex::clear_volume() {
  volume_ = 0;
}
inline double DemoIndex::volume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoIndex.Volume)
  return volume_;
}
inline void DemoIndex::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoIndex.Volume)
}

// -------------------------------------------------------------------

// DemoVirtualPrice

// optional string Code = 1;
inline void DemoVirtualPrice::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DemoVirtualPrice::code() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoVirtualPrice::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.Code)
}
inline void DemoVirtualPrice::set_code(const char* value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MyUnitTest.DemoVirtualPrice.Code)
}
inline void DemoVirtualPrice::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MyUnitTest.DemoVirtualPrice.Code)
}
inline ::std::string* DemoVirtualPrice::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:MyUnitTest.DemoVirtualPrice.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DemoVirtualPrice::release_code() {
  // @@protoc_insertion_point(field_release:MyUnitTest.DemoVirtualPrice.Code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DemoVirtualPrice::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:MyUnitTest.DemoVirtualPrice.Code)
}

// optional uint32 VirtualPrice = 2;
inline void DemoVirtualPrice::clear_virtualprice() {
  virtualprice_ = 0u;
}
inline ::google::protobuf::uint32 DemoVirtualPrice::virtualprice() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.VirtualPrice)
  return virtualprice_;
}
inline void DemoVirtualPrice::set_virtualprice(::google::protobuf::uint32 value) {
  
  virtualprice_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.VirtualPrice)
}

// optional double VirtualVolume = 3;
inline void DemoVirtualPrice::clear_virtualvolume() {
  virtualvolume_ = 0;
}
inline double DemoVirtualPrice::virtualvolume() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.VirtualVolume)
  return virtualvolume_;
}
inline void DemoVirtualPrice::set_virtualvolume(double value) {
  
  virtualvolume_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.VirtualVolume)
}

// optional double BuyVirtualVol = 4;
inline void DemoVirtualPrice::clear_buyvirtualvol() {
  buyvirtualvol_ = 0;
}
inline double DemoVirtualPrice::buyvirtualvol() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.BuyVirtualVol)
  return buyvirtualvol_;
}
inline void DemoVirtualPrice::set_buyvirtualvol(double value) {
  
  buyvirtualvol_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.BuyVirtualVol)
}

// optional double SellVirtualVol = 5;
inline void DemoVirtualPrice::clear_sellvirtualvol() {
  sellvirtualvol_ = 0;
}
inline double DemoVirtualPrice::sellvirtualvol() const {
  // @@protoc_insertion_point(field_get:MyUnitTest.DemoVirtualPrice.SellVirtualVol)
  return sellvirtualvol_;
}
inline void DemoVirtualPrice::set_sellvirtualvol(double value) {
  
  sellvirtualvol_ = value;
  // @@protoc_insertion_point(field_set:MyUnitTest.DemoVirtualPrice.SellVirtualVol)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MyUnitTest

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_demo_2eproto__INCLUDED
